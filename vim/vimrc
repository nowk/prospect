filetype plugin indent on " required!
syntax on                 " required!
set modeline

" ,V reloads it -- making all changes active (have to save first)
map <silent> ,V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>


if has("autocmd")
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
endif


" LEADER
"
let mapleader = "\\"

set t_Co=256
set term=screen-256color-italic
set lazyredraw
set ttyfast
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set nobackup
set nowritebackup
set history=1000               " keep 1000 lines of command line history
set ruler                      " show the cursor position all the time
set showcmd                    " display incomplete commands
set incsearch                  " do incremental searching
set clipboard=unnamedplus      " yank to system clipboard
" set spell
" set spellsuggest=3
set hidden


" disable arrow keys, HAM
"
map <Left>  <Nop>
map <Right> <Nop>
map <Up>    <Nop>
map <Down>  <Nop>

" mouse
"
set mouse=a
set ttymouse=xterm2
" set selectmode=mouse

" Softtabs, 2 spaces
"
set ts=2 sts=2 sw=2 expandtab
set autoindent
set smarttab
set smartindent

" code folding     http://smartic.us/2009/04/06/code-folding-in-vim/
"
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1

" balloons
" not going to work within terminal
"
" set ballooneval 

" style
"
set list!
set listchars=tab:»·,trail:·
set linespace=3

colorscheme genericdc
let &colorcolumn="81"

set nocursorcolumn
set nocursorline
set hlsearch
set number

" http://vim.wikia.com/wiki/Fix_syntax_highlighting
syntax sync minlines=256
set synmaxcol=300
set re=1

" cursorline (just the number column, set in colors)
hi clear cursorline
hi CursorLine cterm=NONE,underline
au VimEnter,WinEnter,BufWinEnter,InsertLeave * setlocal cursorline
au WinLeave,InsertEnter * setlocal nocursorline

" remap C-c or it does not trigger InsertLeave, etc...
map <C-c> <C-[>
map! <C-c> <C-[>
vmap <C-c> <C-[>


"---
"
map <leader>h :set invhls <CR>
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>


" Press Shift+P while in visual mode to replace the selection without overwriting the default register
vmap P p :call setreg('"', getreg('0')) <CR>

" e shortcuts
"
map ,e   :e       <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,et  :tabe    <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,es  :split   <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,ev  :vsplit  <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,mkd :!mkdir  <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,mv  :!mv     <C-R>=escape(expand("%"), '\ ')<CR> <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,cp  :!cp     <C-R>=escape(expand("%"), '\ ')<CR> <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,sa  :saveas  <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>


" http://robots.thoughtbot.com/post/619330025/viiiiiiiiiiiiiiiiiim
nnoremap <silent> <F5>  :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:retab<CR>
map <silent> <C-h> ^cw
vmap D y'>p

" Mappings to find TODOs and stuff
"
nnoremap ,td :noautocmd vimgrep /TODO/j **/*.js<CR>:cw<CR>
nnoremap ,fm :noautocmd vimgrep /FIXME/j **/*.js<CR>:cw<CR>

" MUST disable iterms CMD+r, it refreshes view and screws everything up afterwards
"
map <D-r> <Nop>

" Vim escape lag
" http://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=0


" vimdiff
"
if &diff
    " colorscheme genericdc
endif

" au FilterWritePre * if &diff | colorscheme genericdc | endif


" copy and paste without X. primarily across tmux sessions since I do not have
" X
" Some inspiration from
" http://vim.wikia.com/wiki/In_line_copy_and_paste_to_system_clipboard
if system("echo $DISPLAY") =~ ""
  " copy selected (or last selected) to tmp
  vmap <leader>C :write! /tmp/no-x-clipboard<CR>

  " read from tmp and set to reg, then paste
  map <leader>V :call setreg("\"", readfile("/tmp/no-x-clipboard"))<CR>p
endif


" format json shortcut via pythong's json tool
"
command FormatJson :%!python -m json.tool


" define file type
"
au BufNewFile,BufRead Vunfile    set filetype=vim
au BufNewFile,BufRead *.md       set filetype=markdown
au BufNewFile,BufRead *.markdown set filetype=markdown
au BufNewFile,BufRead *.jsx      set filetype=javascript.jsx
au BufNewFile,BufRead manifest   set filetype=json      " coreos.com/rocket
au BufNewFile,BufRead Dockerfile set filetype=dockerfile


" language tab settings
"
au Filetype go         setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype c          setlocal tabstop=4 shiftwidth=4 softtabstop=4
au Filetype md         setlocal tabstop=2 shiftwidth=2 softtabstop=2
au Filetype markdown   setlocal tabstop=2 shiftwidth=2 softtabstop=2
au Filetype manifest   setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype make       setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype dockerfile setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype sh         setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype json       setlocal tabstop=4 shiftwidth=4 softtabstop=4


" commenting
"
au BufNewFile,BufRead * setlocal formatoptions-=cr formatoptions+=o


" ------------------------------------------------------------------------- "
" Plugin settings                                                              "
" ------------------------------------------------------------------------- "

" FIXME Weird issue, which appeared after moving to Yosemite, that unsets my
" clipboard and I can't past anything in or out of my current vim session.
" Manually restarting vim or running the set clipboard command resolves the
" issue till it happens again. Till I can find out exactly what is going on
" little bit of sanity...
autocmd BufWritePost * :set clipboard+=unnamed


" vim-go
"
" let g:go_bin_path = expand("~/golang/bin")
let g:go_fmt_command = "gofmt"
let g:go_jump_to_error = 0
" let g:go_fmt_fail_silently = 1
let g:go_highlight_functions=1
let g:go_highlight_methods=1
let g:go_highlight_structs=1
let g:go_highlight_operators=1

au FileType go set listchars=tab:·\ 
au FileType go nmap ,r <Plug>(go-run)
au FileType go nmap ,b <Plug>(go-build)
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b <Plug>(go-build)
au FileType go nmap <Leader>t <Plug>(go-test)
au FileType go nmap <Leader>tf <Plug>(go-test-function)
au FileType go nmap <Leader>tl <Plug>(go-test-last)
au FileType go nmap <Leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gs <Plug>(go-doc-split)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" au FileType go nmap <Leader>gt <Plug>(go-doc-tab) " conflicts with tab
" movement \gt
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gi <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)

" command! -nargs=0 GoTestl call go#cmd#TestLast()
command! -bang -nargs=* GoTestf call go#cmd#TestFunc(<bang>1, <f-args>)


" vim-go-templates
"
au BufRead,BufNewFile *.tmpl set filetype=gotplhtml.html
let g:gotpl_deliml="<%"
let g:gotpl_delimr="%>"


" tagbar
"
" nmap <silent> <leader>tb :TagbarToggle<CR>
nmap <F8> :TagbarToggle<CR>
let g:tagbar_autoclose=1
let g:tagbar_autofocus=1
let g:tagbar_autoshowtag=1
let g:tagbar_left=0
let g:tagbar_width=30


" NERDTree
"
nmap <silent> <leader>p :NERDTreeToggle<CR>
nmap <silent> <leader>b :NERDTreeFromBookmark<CR>
let NERDTreeIgnore = [
      \ "*.*.orig",
      \ ".DS_Store",
      \ ".*.*sw[a-z]*",
      \ "node_modules"
      \]


" Syntastic
"
let g:syntastic_enable_signs        = 1
let g:syntastic_auto_loc_list       = 0
let g:syntastic_loc_list_height     = 4
let g:syntastic_enable_highlighting = 1
" let g:syntastic_quiet_warnings      = 1
" let g:syntastic_auto_jump           = 1
let g:syntastic_javascript_checkers  = ['eslint']
" let g:syntastic_stl_format          = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'

" https://github.com/fatih/vim-go/issues/144
" let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['go']
  \ }

" SaveAndCheck saves and checks a file with Syntastic's SyntasticCheck
" Provides some relief for the slowness that arises from the check on every save
" attributed to Syntastic.
fu! s:saveAndCheck()
  :w
  call SyntasticCheck()
endfu

command W :call s:saveAndCheck()


" Unite
"
let g:unite_source_history_yank_enable = 1
" let g:unite_source_rec_max_cache_files = 0

nnoremap <C-p> :Unite -buffer-name=files -start-insert file_rec/async:!<cr>
nnoremap <C-b> :Unite -buffer-name=buffer -start-insert buffer<cr>
nnoremap <space>/ :Unite grep:.<cr>
nnoremap <space>s :Unite -quick-match buffer<cr>

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.swp', '\.swo', '\~$',
      \ '\.git/', '\.svn/', '\.hg/',
      \ '^tags$', '\.taghl$',
      \ 'node_modules/', 'log/', 'tmp/', 'obj/',
      \ ], '\|'))
call unite#custom#profile('default', 'context', {
      \   'prompt': '»» ',
      \   'start_insert': 1,
      \   'update_time': 200,
      \   'cursor_line_highlight': 'UniteSelectedLine',
      \ })
call unite#custom#source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'max_candidates', 0)

if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '-i --vimgrep --hidden ' .
        \ ' --ignore ''.hg''' .
        \ ' --ignore ''.svn''' .
        \ ' --ignore ''.git''' .
        \ ' --ignore ''.bzr''' .
        \ ' --ignore ''node_modules''' .
        \ ''
  let g:unite_source_grep_recursive_opt = ''
endif

" http://www.codeography.com/2013/06/17/replacing-all-the-things-with-unite-vim.html
" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1

  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction


" easymotion, \\ is being used by comments
"
map //e <Plug>(easymotion-prefix)

" hjkl search
map //l <Plug>(easymotion-lineforward)
map //j <Plug>(easymotion-j)
map //k <Plug>(easymotion-k)
map //h <Plug>(easymotion-linebackward)

" characters search
map //s <Plug>(easymotion-sn)

" page forward and back in character search, like ctrl+g
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)


" commentary
"
autocmd FileType go set commentstring=//\ %s
" xnoremap // <Plug>CommentaryLine

" vim-multiple-cursors
"
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_exit_from_insert_mode=0
" let g:multi_cursor_exit_from_visual_mode=0
hi multiple_cursors_cursor ctermfg=253 ctermbg=198
hi multiple_cursors_visual ctermfg=234 ctermbg=219


" airline and tmuxline
"
set laststatus=2
let g:tmuxline_theme = 'tmux'
let g:airline#extensions#tabline#enabled = 1


" remove preview
set completeopt-=preview

" YouCompleteMe
"
" " let g:loaded_youcompleteme=0
" let g:ycm_add_preview_to_completeopt=0
" let g:ycm_autoclose_preview_window_after_completion=1
" let g:ycm_autoclose_preview_window_after_insertion=1
" let g:ycm_filetype_blacklist = {
"   \ 'tagbar' : 1,
"   \ 'qf' : 1,
"   \ 'notes' : 1,
"   \ 'markdown' : 1,
"   \ 'unite' : 1,
"   \ 'text' : 1,
"   \ 'vimwiki' : 1,
"   \ 'pandoc' : 1,
"   \ 'infolog' : 1,
"   \ 'mail' : 1,
"   \ 'rb' : 1,
"   \ 'ruby' : 1,
"   \}

" utilsnips
"
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" https://github.com/Valloric/YouCompleteMe/issues/36#issuecomment-17680963
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"


" node, aka dead.js
"
function! s:jsTest(bang)
  if a:bang
    let flag = "--harmony"
  else
    let flag = ""
  endif

  let cmd = "NODE_ENV=test ./docker-run mocha "
    \ . expand("%p")
    \ . " --reporter spec "
    \ . flag

  execute "!echo '" . cmd . "' && " . cmd
endfunction

command! -bang JsTest call s:jsTest(<bang>0)


" chmod +x command
"
fu! s:chmodxFunc()
  execute "!sudo chmod +x " . expand("%p")
endfu

command Chmodx :call s:chmodxFunc()


" cat <file>
" for easy cut & paste (pixel)
"
fu! s:catFunc()
  execute "!cat ". expand("%p")
endfu

command Catf :call s:catFunc()


" neocomplete
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_camel_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
let g:neocomplete#enable_auto_close_preview = 1

let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h>  neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>   neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()"

" Enable omni completion.
autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

" neocomplete vim-multiple-cusors conflict
" https://github.com/terryma/vim-multiple-cursors/issues/51
function! Multiple_cursors_before()
  exe 'NeoCompleteLock'
  " echo 'Disabled autocomplete'
endfunction

function! Multiple_cursors_after()
  exe 'NeoCompleteUnlock'
  " echo 'Enabled autocomplete'
endfunction
