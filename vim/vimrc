" filetype plugin indent on " required!
" syntax on                 " required!
set modeline

" ,V reloads it -- making all changes active (have to save first)
map <silent> ,V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>


if has("autocmd")
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
endif


" LEADER
"
let mapleader = "\\"

set t_Co=256
set lazyredraw
set ttyfast
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set nobackup
set nowritebackup
set history=1000               " keep 1000 lines of command line history
set ruler                      " show the cursor position all the time
set showcmd                    " display incomplete commands
set incsearch                  " do incremental searching
set clipboard=unnamedplus      " yank to system clipboard
" set spell
" set spellsuggest=3
set hidden


" disable arrow keys, HAM
"
map <Left>  <Nop>
map <Right> <Nop>
map <Up>    <Nop>
map <Down>  <Nop>

" mouse
"
set mouse=a

if !has('nvim')

set ttymouse=xterm2

endif
" set selectmode=mouse

" Softtabs, 2 spaces
"
set ts=2 sts=2 sw=2 expandtab
set autoindent
set smarttab
set smartindent

" code folding     http://smartic.us/2009/04/06/code-folding-in-vim/
"
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1

" balloons
" not going to work within terminal
"
" set ballooneval 

" style
"
set list!
set listchars=tab:»·,trail:·
set linespace=3

if exists('$TMUX')
" Colors in tmux
let &t_8f = "<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "<Esc>[48;2;%lu;%lu;%lum"
endif

colorscheme onedark
" colorscheme genericdc
" colorscheme tokyo-metro
" background color in mosh is #252525
" set background=dark
let g:airline_theme='onedark'
let &colorcolumn="81"

" https://stackoverflow.com/questions/4325682/vim-colorschemes-not-changing-background-color/23982923
highlight Normal  ctermbg=NONE
highlight nonText ctermbg=NONE

set nocursorcolumn
set nocursorline
set hlsearch
set number

" http://vim.wikia.com/wiki/Fix_syntax_highlighting
syntax sync minlines=256
set synmaxcol=300
set re=1

" cursorline (just the number column, set in colors)
hi clear cursorline
hi CursorLine cterm=NONE,underline
au VimEnter,WinEnter,BufWinEnter,InsertLeave * setlocal cursorline
au WinLeave,InsertEnter * setlocal nocursorline

" remap C-c or it does not trigger InsertLeave, etc...
map <C-c> <C-[>
map! <C-c> <C-[>
vmap <C-c> <C-[>


"---
"
map <leader>h :set invhls <CR>
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>


" Press Shift+P while in visual mode to replace the selection without overwriting the default register
vmap P p :call setreg('"', getreg('0')) <CR>

" e shortcuts
"
map ,e   :e       <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,et  :tabe    <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,es  :split   <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,ev  :vsplit  <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,mkd :!mkdir  <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,mv  :!mv     <C-R>=escape(expand("%"), '\ ')<CR> <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,cp  :!cp     <C-R>=escape(expand("%"), '\ ')<CR> <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>
map ,sa  :saveas  <C-R>=escape(expand("%:p:h") . "/", '\ ') <CR>


" http://robots.thoughtbot.com/post/619330025/viiiiiiiiiiiiiiiiiim
nnoremap <silent> <F5>  :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:retab<CR>
map <silent> <C-h> ^cw
vmap D y'>p

" Mappings to find TODOs and stuff
"
nnoremap ,td :noautocmd vimgrep /TODO/j **/*<CR>:cw<CR>
nnoremap ,fm :noautocmd vimgrep /FIXME/j **/*<CR>:cw<CR>

" MUST disable iterms CMD+r, it refreshes view and screws everything up afterwards
"
map <D-r> <Nop>

" Vim escape lag
" http://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=0


" vimdiff
"
if &diff
    " colorscheme genericdc
endif

" au FilterWritePre * if &diff | colorscheme genericdc | endif


" copy and paste without X. primarily across tmux sessions since I do not have
" X
" Some inspiration from
" http://vim.wikia.com/wiki/In_line_copy_and_paste_to_system_clipboard
if system("echo $DISPLAY") =~ ""
  " copy selected (or last selected) to tmp
  vmap <leader>C :write! /tmp/no-x-clipboard<CR>

  " read from tmp and set to reg, then paste
  map <leader>V :call setreg("\"", readfile("/tmp/no-x-clipboard"))<CR>p
endif


" format json shortcut via pythong's json tool
"
command FormatJson :%!python -m json.tool


" define file type
"
au BufNewFile,BufRead Vunfile    set filetype=vim
au BufNewFile,BufRead *.md       set filetype=markdown
au BufNewFile,BufRead *.markdown set filetype=markdown
au BufNewFile,BufRead *.jsx      set filetype=javascript.jsx
au BufNewFile,BufRead manifest   set filetype=json      " coreos.com/rocket
au BufNewFile,BufRead Dockerfile set filetype=dockerfile
au BufNewFile,BufRead *.rabl     set filetype=ruby


" language tab settings
"
au Filetype go         setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype c          setlocal tabstop=4 shiftwidth=4 softtabstop=4
au Filetype md         setlocal tabstop=2 shiftwidth=2 softtabstop=2
au Filetype markdown   setlocal tabstop=2 shiftwidth=2 softtabstop=2
au Filetype ruby       setlocal tabstop=2 shiftwidth=2 softtabstop=2
au Filetype manifest   setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype make       setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype dockerfile setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype sh         setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au Filetype json       setlocal tabstop=2 shiftwidth=2 softtabstop=2
au Filetype toml       setlocal tabstop=4 shiftwidth=4 softtabstop=4
" au Filetype tf         setlocal tabstop=4 shiftwidth=4 softtabstop=4
au Filetype vim        setlocal tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab


" commenting
"
au BufNewFile,BufRead * setlocal formatoptions-=cr formatoptions+=o


" ------------------------------------------------------------------------- "
" Plugin settings                                                              "
" ------------------------------------------------------------------------- "

" FIXME Weird issue, which appeared after moving to Yosemite, that unsets my
" clipboard and I can't past anything in or out of my current vim session.
" Manually restarting vim or running the set clipboard command resolves the
" issue till it happens again. Till I can find out exactly what is going on
" little bit of sanity...
autocmd BufWritePost * :set clipboard+=unnamed


" vim-go
"
" let g:go_bin_path = expand("~/golang/bin")
let g:go_fmt_command = "gofmt"
let g:go_jump_to_error = 0
" let g:go_fmt_fail_silently = 1
let g:go_highlight_functions=1
let g:go_highlight_methods=1
let g:go_highlight_structs=1
let g:go_highlight_operators=1

let g:go_term_mode="split"

au FileType go set listchars=tab:·\ 
au FileType go nmap ,r <Plug>(go-run)
au FileType go nmap ,b <Plug>(go-build)
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b <Plug>(go-build)
au FileType go nmap <Leader>t <Plug>(go-test)
au FileType go nmap <Leader>tf <Plug>(go-test-function)
au FileType go nmap <Leader>tl <Plug>(go-test-last)
au FileType go nmap <Leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gs <Plug>(go-doc-split)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" au FileType go nmap <Leader>gt <Plug>(go-doc-tab) " conflicts with tab
" movement \gt
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gi <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)

" command! -nargs=0 GoTestl call go#cmd#TestLast()
command! -bang -nargs=* GoTestf call go#cmd#TestFunc(<bang>1, <f-args>)


" vim-go-templates
"
au BufRead,BufNewFile *.tmpl set filetype=gotplhtml.html
let g:gotpl_deliml="<%"
let g:gotpl_delimr="%>"


" tagbar
"
" nmap <silent> <leader>tb :TagbarToggle<CR>
nmap <F8> :TagbarToggle<CR>
let g:tagbar_autoclose=1
let g:tagbar_autofocus=1
let g:tagbar_autoshowtag=1
let g:tagbar_left=0
let g:tagbar_width=30


" NERDTree
"
nmap <silent> <leader>p :NERDTreeToggle<CR>
nmap <silent> <leader>b :NERDTreeFromBookmark<CR>
let NERDTreeIgnore = [
      \ '*.*.orig',
      \ '.DS_Store',
      \ '.*.*sw[a-z]*',
      \ 'node_modules',
      \ 'dist',
      \ '\.test$',
      \ '\.bin$',
      \ '^vendor$', 
      \ '^node_modules$', 
      \ '^bower_components$', 
      \ '\.tfstate$', 
      \ '\.tfstate\.backup$'
      \ ]

" ctrlp
"
let g:ctrlp_map                   = '<c-p>'
let g:ctrlp_cmd                   = 'CtrlP'
let g:ctrlp_working_path_mode     = 'ra'
let g:ctrlp_regexp                = 1
let g:ctrlp_open_new_file         = 'r'
let g:ctrlp_max_height            = 15
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_reuse_window          = 'netrw\|nerdtree'
let g:ctrlp_switch_buffer         = 0
let g:ctrlp_show_hidden           = 1
set wildignore+=*/tmp/*,*/node_modules/*,*/bower_components/*,*.so,*.swp,*.zip,*.git,*.css_cache,*.asset_cache,*/dist/*     " MacOSX/Linux
set wildignore+=*/.vendor/*,*/.bundle/* ",*/vendor/*,*/bundle/*
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
set wildignore+=*.*.orig,.DS_Store,*ZoneIdentifier
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|bin)$'
map <silent> <c-l> :CtrlPClearCache<cr>
map <silent> <c-b> :CtrlPBuffer<cr>

" ag
"
let g:ag_prg='ag -S --nocolor --nogroup --column --ignore node_modules --ignore bower_components --ignore "./\.?vendor/*"  --ignore "./\.?bundle/*" --ignore dist'


" easymotion, \\ is being used by comments
"
map //e <Plug>(easymotion-prefix)

" hjkl search
map //l <Plug>(easymotion-lineforward)
map //j <Plug>(easymotion-j)
map //k <Plug>(easymotion-k)
map //h <Plug>(easymotion-linebackward)

" characters search
map //s <Plug>(easymotion-sn)

" page forward and back in character search, like ctrl+g
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)


" commentary
"
autocmd FileType go set commentstring=//\ %s
autocmd FileType terraform set commentstring=//\ %s
autocmd FileType tf set commentstring=//\ %s
map ?? <Plug>CommentaryLine

" vim-multiple-cursors
"
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_exit_from_insert_mode=0
" let g:multi_cursor_exit_from_visual_mode=0
hi multiple_cursors_cursor ctermfg=253 ctermbg=198
hi multiple_cursors_visual ctermfg=234 ctermbg=219


" airline and tmuxline
"
set laststatus=2
let g:tmuxline_theme = 'tmux'
let g:airline#extensions#tabline#enabled = 1
" let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

" FIX 
let g:airline_symbols.readonly = 'RO'
let g:airline_symbols.whitespace = "ws"
let g:airline_symbols.linenr = "ln"
let g:airline_symbols.maxlinenr = " max"
let g:airline_symbols.branch = "br"
let g:airline_symbols.notexists = "ne"
let g:airline_symbols.crypt = "cr"

let g:tmuxline_separators = {
    \ 'left' : '',
    \ 'left_alt': '>',
    \ 'right' : '',
    \ 'right_alt' : '<',
    \ 'space' : ' '}


" remove preview
set completeopt-=preview
set omnifunc=csscomplete#CompleteCSS
autocmd BufNewFile,BufRead *.scss             set ft=scss.css

let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_completion_start_length = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#force_omni_input_patterns = get(g:, 'deoplete#force_omni_input_patterns', {})
let g:deoplete#force_omni_input_patterns.javascript = '[^. \t]\.\w*'
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

au FileType javascript,jsx setl omnifunc=tern#Complete

" YouCompleteMe

" let g:ycm_add_preview_to_completeopt=1
" let g:ycm_autoclose_preview_window_after_completion=1
" let g:ycm_autoclose_preview_window_after_insertion=1
" let g:ycm_filetype_blacklist = {
"   \ 'gitcommit' : 1,
"   \ 'tagbar' : 1,
"   \ 'qf' : 1,
"   \ 'notes' : 1,
"   \ 'markdown' : 1,
"   \ 'unite' : 1,
"   \ 'text' : 1,
"   \ 'vimwiki' : 1,
"   \ 'pandoc' : 1,
"   \ 'infolog' : 1,
"   \ 'mail' : 1,
"   \ 'rb' : 1,
"   \ 'ruby' : 1,
"   \}

" utilsnips
"
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" golang test command
"
" vim-go (plain vim) fails for some unknown reason
fu! s:goTest(bang)
	let file = expand('%')

	if !file =~# '^\f\+\.go$'
		echo "go: [test] not a test file"
		return
	endif

	let args = []

	if !a:bang
		let test = search('func \(Test\|Example\)', "bcnW")

		if test == 0
			echo "go: [test] no test found immediate to cursor"
			return
		end

		let line = getline(test)
		let name = split(split(line, " ")[1], "(")[0]
		let args = ["-run", name . "$"]
	endif

	let cmd = "!docker-compose run --rm --no-deps -e GO_ENV=test go test " .join(args, ' ')

	exec cmd
endfu

command! -bang Gotest call s:goTest(<bang>0)


" mocha test run command
"
fu! s:mochaTest()
  exec "!docker-compose run --rm -e NODE_ENV=test mocha " .expand("%p") ." --reporter spec --bail --no-colors --require babel.mocha"
endfu

command MochaTest call s:mochaTest()


" ruby tests commands
"
function! s:rspecTest(bang)
  let file_line = expand("%p")

  if !a:bang
    let file_line = file_line .":" .line(".")
	endif

	" TODO do we need to add RAILS_ENV=test ? isn't Rspec alwas in test anyway?
  let cmd = "docker-compose run --rm -e RAILS_ENV=test rspec " .file_line  ." --format doc --color"
  echo cmd
  execute "!" .cmd
endfunction

command! -bang RspecTest call s:rspecTest(<bang>0)


" chmod +x command
"
fu! s:chmodxFunc()
  execute "!sudo chmod +x " . expand("%p")
endfu

command Chmodx :call s:chmodxFunc()


" cat <file>
" for easy cut & paste (pixel)
"
fu! s:catFunc()
  execute "!cat ". expand("%p")
endfu

command Catf :call s:catFunc()

" adujust quickfix window
" http://vim.wikia.com/wiki/Automatically_fitting_a_quickfix_window_height
" NOTE: this is primarily for nvim, the quickfix wundows in nvm always default
" to a 1 line height.
" au FileType qf call AdjustWindowHeight(3, 10)
" function! AdjustWindowHeight(minheight, maxheight)
"   let l = 1
"   let n_lines = 0
"   let w_width = winwidth(0)
"   while l <= line('$')
"     " number to float for division
"     let l_len = strlen(getline(l)) + 0.0
"     let line_width = l_len/w_width
"     let n_lines += float2nr(ceil(line_width))
"     let l += 1
"   endw
"   exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
" endfunction

autocmd BufWritePost *.js AsyncRun -post=checktime ./node_modules/.bin/eslint --fix %

